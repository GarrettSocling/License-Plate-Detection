#-------------------------------------------------------------------------------
# Name:        module1
# Purpose:
#
# Author:      Sardhendu_Mishra
#
# Created:     09/03/2015
# Copyright:   (c) Sardhendu_Mishra 2015
# Licence:     <your licence>
#-------------------------------------------------------------------------------
'''
About: This code snippet is the logistic regression without regularization, Given the training data set this code snippet find the best parameter or the weights (thetas) for each
       feature of the data set. This is operated for 2nd degree polynomial.
'''

import numpy as np
import matplotlib.pyplot as plt


def cal_feature_scalling(x,n,mn,sd):
    for mnsd in range (1,n):    # 1,n-1 because in numpy array the first column is 1, second is 2 and so on
        x[:,mnsd]=np.divide(np.subtract(x[:,mnsd] , mn[mnsd]), sd[mnsd])

    return x


#hh=[]
def cal_sigmoid(x,theta):
    z=np.dot(x,theta)  # For matrix multiplication x is [80*3], theta is [3*1]
    h= 1 / (1 + np.exp(- z))
    return h

def cal_cost(h, y, m):
    j_theta= (-np.transpose(y).dot(np.log(h)) - (np.transpose(1-y).dot(np.log(1-h))))/m
    return j_theta

def cal_grad(x,y,h,m):
    error =h-y
    grad=  (np.dot(np.transpose(x), error))/m # For matrix multiplication x transpose is [3*80] and y is [80*1]
    return grad


def main_call(x,y,alpha, max_iter,m,n):
    #print n
    j_theta=np.zeros(shape=(max_iter,1))
    theta=np.zeros(shape=(n,1))
    for num_iter in range (0,max_iter):
        h=cal_sigmoid(x,theta)
        j_theta[num_iter]=cal_cost(h, y, m)
        grad=cal_grad(x,y,h,m)
        theta=theta-(alpha*grad)

    return j_theta, theta




'''
x=  np.array([[5.5500000e+01,   6.9500000e+01],
   [4.1000000e+01,   8.1500000e+01],
   [5.3500000e+01,   8.6000000e+01],
   [4.6000000e+01,   8.4000000e+01],
   [4.1000000e+01,   7.3500000e+01],
   [5.1500000e+01,   6.9000000e+01],
   [5.1000000e+01,   6.2500000e+01],
   [4.2000000e+01,   7.5000000e+01],
   [5.3500000e+01,   8.3000000e+01],
   [5.7500000e+01,   7.1000000e+01],
   [4.2500000e+01,   7.2500000e+01],
   [4.1000000e+01,   8.0000000e+01],
   [4.6000000e+01,   8.2000000e+01],
   [4.6000000e+01,   6.0500000e+01],
   [4.9500000e+01,   7.6000000e+01],
   [4.1000000e+01,   7.6000000e+01],
   [4.8500000e+01,   7.2500000e+01],
   [5.1500000e+01,   8.2500000e+01],
   [4.4500000e+01,   7.0500000e+01],
   [4.4000000e+01,   6.6000000e+01],
   [3.3000000e+01,   7.6500000e+01],
   [3.3500000e+01,   7.8500000e+01],
   [3.1500000e+01,   7.2000000e+01],
   [3.3000000e+01,   8.1500000e+01],
   [4.2000000e+01,   5.9500000e+01],
   [3.0000000e+01,   6.4000000e+01],
   [6.1000000e+01,   4.5000000e+01],
   [4.9000000e+01,   7.9000000e+01],
   [2.6500000e+01,   6.4500000e+01],
   [3.4000000e+01,   7.1500000e+01],
   [4.2000000e+01,   8.3500000e+01],
   [2.9500000e+01,   7.4500000e+01],
   [3.9500000e+01,   7.0000000e+01],
   [5.1500000e+01,   6.6000000e+01],
   [4.1500000e+01,   7.1500000e+01],
   [4.2500000e+01,   7.9500000e+01],
   [3.5000000e+01,   5.9500000e+01],
   [3.8500000e+01,   7.3500000e+01],
   [3.2000000e+01,   8.1500000e+01],
   [4.6000000e+01,   6.0500000e+01],
   [3.6500000e+01,   5.3000000e+01],
   [3.6500000e+01,   5.3500000e+01],
   [2.4000000e+01,   6.0500000e+01],
   [1.9000000e+01,   5.7500000e+01],
   [3.4500000e+01,   6.0000000e+01],
   [3.7500000e+01,   6.4500000e+01],
   [3.5500000e+01,   5.1000000e+01],
   [3.7000000e+01,   5.0500000e+01],
   [2.1500000e+01,   4.2000000e+01],
   [3.5500000e+01,   5.8500000e+01],
   [2.6500000e+01,   6.8500000e+01],
   [2.6500000e+01,   5.5500000e+01],
   [1.8500000e+01,   6.7000000e+01],
   [4.0000000e+01,   6.7000000e+01],
   [3.2500000e+01,   7.1500000e+01],
   [3.9000000e+01,   7.1500000e+01],
   [4.3000000e+01,   5.5500000e+01],
   [2.2000000e+01,   5.4000000e+01],
   [3.6000000e+01,   6.2500000e+01],
   [3.1000000e+01,   5.5500000e+01],
   [3.8500000e+01,   7.6000000e+01],
   [4.0000000e+01,   7.5000000e+01],
   [3.7500000e+01,   6.3000000e+01],
   [2.4500000e+01,   5.8000000e+01],
   [3.0000000e+01,   6.7000000e+01],
   [3.3000000e+01,   5.6000000e+01],
   [5.6500000e+01,   6.1000000e+01],
   [4.1000000e+01,   5.7000000e+01],
   [4.9500000e+01,   6.3000000e+01],
   [3.4500000e+01,   7.2500000e+01],
   [3.2500000e+01,   6.9000000e+01],
   [3.6000000e+01,   7.3000000e+01],
   [2.7000000e+01,   5.3500000e+01],
   [4.1000000e+01,   6.3500000e+01],
   [2.9500000e+01,   5.2500000e+01],
   [2.0000000e+01,   6.5500000e+01],
   [3.8000000e+01,   6.5000000e+01],
   [1.8500000e+01,   7.4500000e+01],
   [1.6000000e+01,   7.2500000e+01],
   [3.3500000e+01,   6.8000000e+01]], np.float32)

y=np.array([[1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [1.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00],
   [0.0000000e+00]], np.float32)
'''